import java.util.ArrayList;
import java.text.SimpleDateFormat;  
import java.util.Date; 
import java.util.Scanner;

interface assignment2{
	public void add_assessments(ArrayList<assessment> assessment_list);
	public void grade_assessments(ArrayList<assessment> assessment_list);
	
}




class  student implements assignment2 {
	String sname;
	int i;
	public student(String sname,int i) {
	this.sname = sname ;
	this .i = i;
	}
	
	public void add_assessments(ArrayList<assessment> assessment_list) {
	        System.out.println("Pending assessments");
	        for(int i = 0; i < assessment_list.size() ; i++){
	            if(assessment_list.get(i).getsubmit(i) == null){
	            	if (assessment_list.get(i).gettype() =="assignment") {
	    				System.out.println("ID"+i+"assignment"+assessment_list.get(i).getproblem()+"max_marks: "+assessment_list.get(i).getmax_marks());
	    				System.out.println("-------------------");
	    			}
	    			if (assessment_list.get(i).gettype() =="quiz") {
	    				System.out.println("ID"+i+"question"+assessment_list.get(i).getproblem());
	    				System.out.println("-------------------");
	    			}
	            }
	        }
	        System.out.print("Enter ID of assessment: ");
	        Scanner input = new Scanner(System.in);
	        int s = input.nextInt();
	        input.nextLine();
	        System.out.println();
	        if(assessment_list.get(s).gettype() == "assignment") {
	            System.out.print("Enter filename of assignment: ");
	        }
	        else if(assessment_list.get(s).gettype() == "quiz") {
	            System.out.println(assessment_list.get(s).getproblem());
	        }
	        assessment_list.get(s).setsubmit(i, input.nextLine());
		
		
		
	}
	public void grade_assessments(ArrayList<assessment> assessment_list) {
        System.out.println("Graded submissions");
        for(int j = 0; j < assessment_list.size() ; j++){
            if(assessment_list.get(i).getgrades(i) != -1){
                System.out.println("Submission" + assessment_list.get(j).getsubmit(i));
                System.out.println("Marks scored: " + assessment_list.get(j).getgrades(i));
                System.out.println("Graded by: " + assessment_list.get(j).getinstructor_id());
            }
        }
        System.out.println();
        System.out.println("Ungraded submissions");
        for(int k = 0; k < assessment_list.size() ; k++){
            if((assessment_list.get(k).getgrades(i) == -1) && (assessment_list.get(k).getsubmit(i) != null)){
                System.out.println("Submission" + assessment_list.get(k).getsubmit(i));
            }
        }
        System.out.println("-------------------");
    }

}

class instructor implements assignment2 {
	
	String name;
	public instructor(String name) {
		this.name = name;
	}
	public void add_assessments(ArrayList<assessment> assessment_list){
		
		assessment k =new assessment();
		System.out.println("1. add lecture slides");
		System.out.println("2. add quiz");
		Scanner input = new Scanner(System.in);
		int m = input.nextInt();
		input.nextLine();
		if (m==1) {
			String type = "assignment";
			String close = "not closed";
			System.out.println("enter problem statment");
			String problem = input .nextLine();
			input.nextLine();
			System.out.println("enter max marks ");
			int max_marks = input.nextInt();	
			input.nextLine();
			assessment_list.add(k);
		}
		if (m==2) {
			String type = "quiz";
			String close ="not closed";
			System.out.println("enter quiz question");
			String problem =input.nextLine();
			input.nextLine();
			int max_marks = 1;
			assessment_list.add(k);
		}
		
	}
	
	public void grade_assessments(ArrayList<assessment> assessment_list) {
		
		System.out.println("list of assessments");
		for (int u=0;u <assessment_list.size();u++) {
			if (assessment_list.get(u).gettype() =="assignment") {
				System.out.println("ID"+u+"assignment"+assessment_list.get(u).getproblem()+"max_marks: "+assessment_list.get(u).getmax_marks());
				System.out.println("-------------------");
			}
			if (assessment_list.get(u).gettype() =="quiz") {
				System.out.println("ID"+u+"question"+assessment_list.get(u).getproblem());
				System.out.println("-------------------");
			}
			
		}
		System.out.println("enter id of the assignment");
		Scanner input = new Scanner(System.in);
		int id = input.nextInt();
		input.nextLine();
		System.out.println("choose id from these ungraded submissions");
		for (int v=0;v <3;v++) {
			if(assessment_list.get(id).getgrades(v)==-1) {
				System.out.println(v+".S"+v);
			}
		}
		int k = input.nextInt();
		input.nextLine();
		System.out.println("submission:");
		System.out.println(assessment_list.get(id).getsubmit(k));
		System.out.println("--------------------------");
		System.out.println("max marks"+ assessment_list.get(id).getmax_marks());
		System.out.println("marks scored");
		int d = input.nextInt();
		input.nextLine();
		assessment_list.get(id).setgrade(k,d);
		assessment_list.get(id).setinstructor_id(name);		
	}
	
}
class assessment {
	private int[] grades;
	private String[] submit ;
	private int max_marks ;
	private String type;
	private String problem;
	private String  close;
	private String instructor_id;
	
	
	public assessment() {
		grades = new int [3];
		grades[0]=-1;
		grades[1]=-1;
		grades[2]=-1;
		submit = new String[3];
		
		}
	public String getproblem(){
        return problem;
    }
    public int getmax_marks(){
        return max_marks;
    }
    public String getsubmit(int i){
        return submit[i];
    }
    public String gettype(){
        return type;
    }
    public void setsubmit(int i , String submit){
        this.submit[i]=submit;
    }
	public int getgrades(int i) {
		return grades[i];
	}
	public void setgrade(int i,int grade) {
		this.grades[i]=grade;
	}
	public String getclose() {
		return close;
	}
	public void setclose(String close) {
		this.close=close;
	}
	public String getinstructor_id() {
		return instructor_id;
	}
	public void setinstructor_id(String instructor_id) {
		this.instructor_id=instructor_id;
		
	}
	
}
class material{
	static ArrayList<String> content_list = new ArrayList<String>();
	String flag;
	String topic;
	String fname;
	instructor iname;
	int number;
	Date date;
	public material (String flag,String topic,int number ,instructor iname,ArrayList <String >slide_name,Date date) {
		this.flag = flag;
		this .topic = topic;
		this .number = number;
		this .iname = iname;
		this .content_list = slide_name;
		this .date = date;
	}
	public material(String flag, String topic,String fname, instructor iname ,Date date) {
		this.flag = flag;
		this .topic = topic;
		this .fname = fname;
		this .iname = iname;
		this .date = date  ;
	}
	
}
class comments{
	String comment;
	Date date ;
	instructor iname;
	student sname;
	public comments (String comment,Date date,instructor iname) {
		this .comment =comment;
		this .date = date;
		this .iname= iname;	
	}
	public comments (String comment,Date date,student sname ) {
		this .comment =comment;
		this .date = date;
		this .sname= sname;	
		
	}
}

public class main {
	static ArrayList<material> material_list = new ArrayList<material>();
	static ArrayList<comments> comments_list = new ArrayList<comments>();
	static ArrayList<assessment> assessment_list = new ArrayList<assessment>();
	
	
	
	static void add_class_material(instructor iname) {
		
		ArrayList<String> content_list = new ArrayList<String>();
		System.out.println("1. add lecture slide ");
		
		System.out.println("2. add lecture vedeio ");
		Scanner input = new Scanner(System.in);
		int b = input.nextInt();
		input.nextLine();
		if (b==1) {
			String flag = "slides";
			System.out.println("enter topic of slides");
			String topic = input.nextLine();
			System.out.println("enter no of slides");
			int number =input.nextInt();
			input.nextLine();
			Date date = new Date();
			
			for (int k=0;k<number;k++) {
				System.out.println("enter content of slide"+(k+1));
				String content = input.nextLine();
				content_list.add(content);
				material x = new material( flag, topic, number ,iname,content_list,date);
				material_list.add(x);
			}
			
		}
		if (b==2) {
			String flag = "video";
			System.out.println("enter topic of video");
			String topic = input.nextLine();
			System.out.println("enter file name of the video");
			String fname = input.nextLine();
			Date date = new Date();
			material y = new material (flag,topic,fname,iname,date);
			material_list.add(y);
			
			
		}
		
		
		
	}
	static void veiw_material() {
		for (int k =0;k<material_list.size();k++) {
			if (material_list.get(k).flag=="slides") {
				System.out.println("title:"+material_list.get(k).topic);
				for (int i =0;i<material_list.get(k).number;i++) {
					System.out.println("slide "+(i+1)+" : "+material_list.get(k).content_list.get(i));
				}
				System.out.println("number of slides : "+material_list.get(k).number);
				System.out.println("date of upload : "+material_list.get(k).date);
				System.out.println("uploaded by :"+ material_list.get(k).iname);
			}
			if (material_list.get(k).flag=="video") {
				System.out.println("titel of the video "+material_list.get(k).topic);
				System.out.println("video file"+material_list.get(k).fname);
				System.out.println("date of upload"+material_list.get(k).date);
				System.out.println("uploaded by "+material_list.get(k).iname);
				
			}
			
			
		}
	}
	
	static void add_comment(instructor iname) {
		System.out.println("enter comment");
		Scanner input = new Scanner(System.in);
		String comment = input.nextLine();
		Date date = new Date();
		comments x = new comments(comment,date,iname);
		comments_list.add(x);	
	}
	static void add_comment(student sname) {
		System.out.println("enter comment");
		Scanner input = new Scanner(System.in);
		String comment = input.nextLine();
		Date date = new Date();
		comments x = new comments(comment,date,sname);
		comments_list.add(x);	
	}
	static void veiw_comment() {
		for (int q=0;q<comments_list.size();q++) {
			if (comments_list.get(q).iname!=null) {
				System.out.println(comments_list.get(q).comment+comments_list.get(q).iname);
				System.out.println(comments_list.get(q).date);
			
			}
			else if (comments_list.get(q).sname!=null) {
				System.out.println(comments_list.get(q).comment+comments_list.get(q).sname);
				System.out.println(comments_list.get(q).date);
				
			}
		}
	}
	
	static void veiw_assessments() {
		for (int u=0;u <assessment_list.size();u++) {
			if (assessment_list.get(u).gettype() =="assignment") {
				System.out.println("ID"+u+"assignment"+assessment_list.get(u).getproblem()+"max_marks: "+assessment_list.get(u).getmax_marks());
				System.out.println("-------------------");
			}
			if (assessment_list.get(u).gettype() =="quiz") {
				System.out.println("ID"+u+"question"+assessment_list.get(u).getproblem());
				System.out.println("-------------------");
			}
			
		}
	}
	static void close_assessment(){
		System.out.println("list open assignments");
		for (int u=0;u <assessment_list.size();u++) {
			if (assessment_list.get(u).gettype() =="assignment" && assessment_list.get(u).getclose()=="not closed") {
				System.out.println("ID"+u+"assignment"+assessment_list.get(u).getproblem()+"max_marks: "+assessment_list.get(u).getmax_marks());
				System.out.println("-------------------");
			}
			if (assessment_list.get(u).gettype() =="quiz"&& assessment_list.get(u).getclose()=="not closed") {
				System.out.println("ID"+u+"question"+assessment_list.get(u).getproblem());
				System.out.println("-------------------");
			}
			
		}
		System.out.println("enter id of assignment to close");
		Scanner input = new Scanner(System.in);
		int id = input .nextInt();
		assessment_list.get(id).setclose("close");
		
		
	}
	 
		
	
	static ArrayList<student> studentsList = new ArrayList<student>();
	static ArrayList<instructor> instructorsList = new ArrayList<instructor>();

	static Scanner input = new Scanner(System.in);
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		instructor i0 = new instructor("I0");
        instructor i1 = new instructor("I1");
        instructorsList.add(i0);
        instructorsList.add(i1);
        student s0 = new student("S0",0);
        student s1 = new student("S1",1);
        student s2 = new student("S2",2);
        studentsList.add(s0);
        studentsList.add(s1);
        studentsList.add(s2);
        
        int temp = -1;
        while (temp != 3) {
            System.out.println("Welcome to Backpack \n1. Enter as instructor \n2. Enter as student\n" +
                    "3. Exit");
            temp = input.nextInt();
            
            input.nextLine();
            int temp1;
            int temp2 = -1;
            if (temp == 1) {
                System.out.println("Instructors:");
                for(int k = 0; k < instructorsList.size(); k++){
                    System.out.println(k + " - " + instructorsList.get(k).name);
                }
                System.out.print("Choose id: ");
                temp1 = input.nextInt();
                input.nextLine();
                temp2 = 0;
                while (temp2 != 9) {
                    System.out.println("Welcome " + instructorsList.get(temp1).name);
                    System.out.println("INSTRUCTOR MENU\n" +
                            "1. Add class material\n" +
                            "2. Add assessments\n" +
                            "3. View lecture materials \n" +
                            "4. View assessments\n" +
                            "5. Grade assessments\n" +
                            "6. Close assessment\n" +
                            "7. View comments\n" +
                            "8. Add comments\n" +
                            "9. Logout");

                    temp2 = input.nextInt();
                    input.nextLine();
                    switch (temp2) {
                        case 1:
                            add_class_material(instructorsList.get(temp1));
                            break;
                        case 2:
                        	
                            instructorsList.get(temp1).add_assessments(assessment_list);
                            break;
                        case 3:
                        	veiw_material();
                            break;
                        case 4:
                        	veiw_assessments();
;                            break;
                        case 5:
                            instructorsList.get(temp1).grade_assessments(assessment_list);;
                            break;
                        case 6:
                        	close_assessment();

                            break;
                        case 7:
                        	veiw_comment();
                            break;
                        case 8:
                        	add_comment(instructorsList.get(temp1));
                            break;
                        case 9:
                            temp2 = 9;
                            break;
                    }
                }
            } else if (temp == 2) {
                System.out.println("Students:");
                for(int k = 0; k < studentsList.size(); k++){
                    System.out.println(k + " - " + studentsList.get(k).sname);
                }
                System.out.print("Choose id: ");
                temp1 = input.nextInt();
                System.out.println();
                input.nextLine();
                temp2 = 0;
                while (temp2 != 7) {
                    System.out.println("Welcome " + studentsList.get(temp1).sname);
                    System.out.println("STUDENT MENU\n" +
                            "1. View lecture materials \n" +
                            "2. View assessments\n" +
                            "3. Submit assessment\n" +
                            "4. View grades\n" +
                            "5. View comments \n" +
                            "6. Add comments \n" +
                            "7. Logout\n");
                    temp2 = input.nextInt();
                    input.nextLine();
                    switch (temp2) {
                        case 1:
                        	veiw_material();
                            break;
                        case 2:
                        	veiw_assessments();
                            break;
                        case 3:
                            studentsList.get(temp1).add_assessments(assessment_list);
                            break;
                        case 4:
                            studentsList.get(temp1).grade_assessments(assessment_list);
                            break;
                        case 5:
                        	veiw_comment();
                            break;
                        case 6:
                        	add_comment(studentsList.get(temp1));
                            break;
                        case 7:
                            temp2 = 7;
                            break;
                    }
                }

            }

        }
	}
}
